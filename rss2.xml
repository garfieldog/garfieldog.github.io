<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Mew]]></title>
    <link>http://garfieldog.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[只有猪肉卷是永恒的]]></description>
    <pubDate>Sun, 06 Sep 2015 11:35:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Leetcode解题-Longest Valid Parentheses]]></title>
      <link>http://garfieldog.github.io/2015/09/06/longest-valid-parentheses/</link>
      <guid>http://garfieldog.github.io/2015/09/06/longest-valid-parentheses/</guid>
      <pubDate>Sun, 06 Sep 2015 11:33:29 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-for]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p>
<p>For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</p>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.</p>
<h2 id="分析">分析</h2></blockquote>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><pre><code class="python">
</code></pre>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/longest-valid-parentheses/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Valid Parentheses]]></title>
      <link>http://garfieldog.github.io/2015/09/06/valid-parentheses/</link>
      <guid>http://garfieldog.github.io/2015/09/06/valid-parentheses/</guid>
      <pubDate>Sun, 06 Sep 2015 11:23:59 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input str]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单的Stack题，时间<code>O(n)</code>，空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">')'</span>: <span class="string">'('</span>,</span><br><span class="line">            <span class="string">'&#125;'</span>: <span class="string">'&#123;'</span>,</span><br><span class="line">            <span class="string">']'</span>: <span class="string">'['</span></span><br><span class="line">        &#125;</span><br><span class="line">        ss = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> <span class="string">'(&#123;['</span>:</span><br><span class="line">                ss.append(c)</span><br><span class="line">            <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">')&#125;]'</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> ss <span class="keyword">or</span> d[c] != ss[-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                ss.pop()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> ss</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/valid-parentheses/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Length of Last Word]]></title>
      <link>http://garfieldog.github.io/2015/09/06/length-of-last-word/</link>
      <guid>http://garfieldog.github.io/2015/09/06/length-of-last-word/</guid>
      <pubDate>Sun, 06 Sep 2015 09:42:05 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.</p>
<p>If the last word does not exist, return 0.</p>
<p>Note: A word is defined as a character sequence consists of non-space characters only.</p>
<p>For example,<br>Given s = “Hello World”,<br>return 5.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单题，时间<code>O(n)</code>, 空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="One_Line_Solver">One Line Solver</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(s.rstrip().split(<span class="string">' '</span>)[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h3 id="迭代">迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        last_space = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">                last_space = <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            n = <span class="number">1</span> <span class="keyword">if</span> last_space <span class="keyword">else</span> n + <span class="number">1</span></span><br><span class="line">            last_space = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/length-of-last-word/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Simplify Path]]></title>
      <link>http://garfieldog.github.io/2015/09/06/simplify-path/</link>
      <guid>http://garfieldog.github.io/2015/09/06/simplify-path/</guid>
      <pubDate>Sun, 06 Sep 2015 09:25:02 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an absolute path for a file (Unix-style), simplify it.</p>
<p>For example,<br>path = “/home/“, =&gt]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an absolute path for a file (Unix-style), simplify it.</p>
<p>For example,<br>path = “/home/“, =&gt; “/home”<br>path = “/a/./b/../../c/“, =&gt; “/c”</p>
<p>Corner Cases:<br>Did you consider the case where path = “/../“?<br>In this case, you should return “/“.<br>Another corner case is the path might contain multiple slashes ‘/‘ together, such as “/home//foo/“.<br>In this case, you should ignore redundant slashes and return “/home/foo”.</p>
</blockquote>
<h2 id="分析">分析</h2><p>比较简单，用stack，注意corner cases。时间<code>O(n)</code>，空间<code>O(n)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">simplifyPath</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type path: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        ps = path.split(<span class="string">'/'</span>)</span><br><span class="line">        ss = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> ps:</span><br><span class="line">            <span class="keyword">if</span> p == <span class="string">'.'</span> <span class="keyword">or</span> p == <span class="string">''</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> p == <span class="string">'..'</span>:</span><br><span class="line">                <span class="keyword">if</span> len(ss) &gt; <span class="number">0</span>:</span><br><span class="line">                    ss.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ss.append(p)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'/'</span> + <span class="string">'/'</span>.join(ss)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/simplify-path/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Group Anagrams]]></title>
      <link>http://garfieldog.github.io/2015/09/06/group-anagrams/</link>
      <guid>http://garfieldog.github.io/2015/09/06/group-anagrams/</guid>
      <pubDate>Sun, 06 Sep 2015 08:30:58 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an array of strings, group anagrams together.</p>
<p>For example, given: [“eat”, “tea”, “tan”, “ate]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an array of strings, group anagrams together.</p>
<p>For example, given: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Return:</p>
<p>[<br>  [“ate”, “eat”,”tea”],<br>  [“nat”,”tan”],<br>  [“bat”]<br>]<br>Note:<br>For the return value, each inner list’s elements must follow the lexicographic order.<br>All inputs will be in lower-case.</p>
</blockquote>
<h2 id="分析">分析</h2><p>用哈希表，理论上可以时间<code>O(nlogn)</code>，空间<code>O(n)</code>。我们下面的实现由于用了数组而不是链表，所以要慢一些，最坏情况<code>O(n^2)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bisect <span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type strs: List[str]</span><br><span class="line">        :rtype: List[List[str]]</span><br><span class="line">        """</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            key = <span class="string">''</span>.join(sorted(s))</span><br><span class="line">            d.setdefault(key, [])</span><br><span class="line">            rs = d[key]</span><br><span class="line">            idx = bisect(rs, s)</span><br><span class="line">            rs.insert(idx, s)</span><br><span class="line">        <span class="keyword">return</span> d.values()</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/group-anagrams/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Count and Say]]></title>
      <link>http://garfieldog.github.io/2015/09/06/count-and-say/</link>
      <guid>http://garfieldog.github.io/2015/09/06/count-and-say/</guid>
      <pubDate>Sun, 06 Sep 2015 08:08:10 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, ]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>The count-and-say sequence is the sequence of integers beginning as follows:<br>1, 11, 21, 1211, 111221, …</p>
<p>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211.<br>Given an integer n, generate the nth sequence.</p>
<p>Note: The sequence of integers will be represented as a string.</p>
</blockquote>
<h2 id="分析">分析</h2><p>暴力法模拟可解，时间复杂度<code>O(n^2)</code>，空间<code>O(n)</code>，实现不难。更好的方法没有想到。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type n: int</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        s = [<span class="string">'1'</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n - <span class="number">1</span>):</span><br><span class="line">            rs = []</span><br><span class="line">            last = <span class="keyword">None</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> last <span class="keyword">or</span> c == last:</span><br><span class="line">                    last = c</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    rs.append(str(count))</span><br><span class="line">                    rs.append(last)</span><br><span class="line">                    last = c</span><br><span class="line">                    count = <span class="number">1</span></span><br><span class="line">            rs.append(str(count))</span><br><span class="line">            rs.append(c)</span><br><span class="line">            s = rs</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(s)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/count-and-say/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Roman to Integer]]></title>
      <link>http://garfieldog.github.io/2015/09/06/roman-to-integer/</link>
      <guid>http://garfieldog.github.io/2015/09/06/roman-to-integer/</guid>
      <pubDate>Sun, 06 Sep 2015 07:45:37 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999</p>
</blockquote>
<h2 id="分析">分析</h2><p>比<a href="/2015/09/06/integer-to-roman/">Integer to Roman</a>简单多了，是加法规则还是减法规则很好判断。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line"></span><br><span class="line">        d = &#123;</span><br><span class="line">            <span class="string">'M'</span>: <span class="number">1000</span>,</span><br><span class="line">            <span class="string">'D'</span>: <span class="number">500</span>,</span><br><span class="line">            <span class="string">'C'</span>: <span class="number">100</span>,</span><br><span class="line">            <span class="string">'L'</span>: <span class="number">50</span>,</span><br><span class="line">            <span class="string">'X'</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">'V'</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">'I'</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = len(s)</span><br><span class="line">        r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">            a = d[s[i]]</span><br><span class="line">            <span class="keyword">if</span> i &lt; n - <span class="number">1</span> <span class="keyword">and</span> a &lt; d[s[i + <span class="number">1</span>]]:</span><br><span class="line">                a = -a</span><br><span class="line">            r += a</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/roman-to-integer/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Integer to Roman]]></title>
      <link>http://garfieldog.github.io/2015/09/06/integer-to-roman/</link>
      <guid>http://garfieldog.github.io/2015/09/06/integer-to-roman/</guid>
      <pubDate>Sun, 06 Sep 2015 06:06:29 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
</blockquote>
<h2 id="分析">分析</h2><p>要考虑<a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97" target="_blank" rel="external">罗马数字</a>的加法规则和减法规则，要写对还是有一定技巧的，下面是一个精巧的解法。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type num: int</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        romans = [</span><br><span class="line">            (<span class="string">'M'</span>, <span class="number">1000</span>),</span><br><span class="line">            (<span class="string">'CM'</span>, <span class="number">900</span>),</span><br><span class="line">            (<span class="string">'D'</span>, <span class="number">500</span>),</span><br><span class="line">            (<span class="string">'CD'</span>, <span class="number">400</span>),</span><br><span class="line">            (<span class="string">'C'</span>, <span class="number">100</span>),</span><br><span class="line">            (<span class="string">'XC'</span>, <span class="number">90</span>),</span><br><span class="line">            (<span class="string">'L'</span>, <span class="number">50</span>),</span><br><span class="line">            (<span class="string">'XL'</span>, <span class="number">40</span>),</span><br><span class="line">            (<span class="string">'X'</span>, <span class="number">10</span>),</span><br><span class="line">            (<span class="string">'IX'</span>, <span class="number">9</span>),</span><br><span class="line">            (<span class="string">'V'</span>, <span class="number">5</span>),</span><br><span class="line">            (<span class="string">'IV'</span>, <span class="number">4</span>),</span><br><span class="line">            (<span class="string">'I'</span>, <span class="number">1</span>)</span><br><span class="line">        ]</span><br><span class="line">        rs = []</span><br><span class="line">        <span class="keyword">for</span> s, n <span class="keyword">in</span> romans:</span><br><span class="line">            c, num = divmod(num, n)</span><br><span class="line">            rs.extend([s] * c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(rs)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/integer-to-roman/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Valid Number]]></title>
      <link>http://garfieldog.github.io/2015/09/06/valid-number/</link>
      <guid>http://garfieldog.github.io/2015/09/06/valid-number/</guid>
      <pubDate>Sun, 06 Sep 2015 02:41:27 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Validate if a given string is numeric.</p>
<p>Some examples:<br>“0” =&gt; true<br>“ 0.1 “ =&gt; true<br>“]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Validate if a given string is numeric.</p>
<p>Some examples:<br>“0” =&gt; true<br>“ 0.1 “ =&gt; true<br>“abc” =&gt; false<br>“1 a” =&gt; false<br>“2e10” =&gt; true<br>Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>
</blockquote>
<h2 id="分析">分析</h2><p>有难度，需要构建状态机。画出来是这个样子的：</p>
<p><img src="/images/valid_number_automata.png" alt="automata"></p>
<p>上面的图是用<a href="http://www.graphviz.org/" target="_blank" rel="external">Graphviz</a>画的，非常好用。贴一下上图的dot语言源码:</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">digraph</span> valid_number &#123; </span><br><span class="line">    rankdir<span class="label">=LR</span><span class="comment">;</span></span><br><span class="line">    node [shape = circle]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> [shape = doublecircle]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S4</span> [shape = doublecircle]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S7</span> [shape = doublecircle]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S8</span> [shape = doublecircle]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S0</span> -&gt; <span class="literal">S0</span> [label = <span class="string">"space"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S0</span> -&gt; <span class="literal">S3</span> [label = <span class="string">"+, -"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S0</span> -&gt; <span class="literal">S1</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S0</span> -&gt; <span class="literal">S2</span> [label = <span class="string">"."</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S0</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> -&gt; <span class="literal">S8</span> [label = <span class="string">"space"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> -&gt; <span class="literal">S1</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> -&gt; <span class="literal">S4</span> [label = <span class="string">"."</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> -&gt; <span class="literal">S5</span> [label = <span class="string">"e"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S1</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S2</span> -&gt; <span class="literal">S4</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S2</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S3</span> -&gt; <span class="literal">S1</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S3</span> -&gt; <span class="literal">S2</span> [label = <span class="string">"."</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S3</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S4</span> -&gt; <span class="literal">S8</span> [label = <span class="string">"space"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S4</span> -&gt; <span class="literal">S4</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S4</span> -&gt; <span class="literal">S5</span> [label = <span class="string">"e"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S4</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S5</span> -&gt; <span class="literal">S6</span> [label = <span class="string">"+, -"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S5</span> -&gt; <span class="literal">S7</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S5</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S6</span> -&gt; <span class="literal">S7</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S6</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S7</span> -&gt; <span class="literal">S8</span> [label = <span class="string">"space"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S7</span> -&gt; <span class="literal">S7</span> [label = <span class="string">"[0-9]"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S7</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S8</span> -&gt; <span class="literal">S8</span> [label = <span class="string">"space"</span>]<span class="comment">;</span></span><br><span class="line">    <span class="literal">S8</span> -&gt; SS [label = <span class="string">"other"</span>]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度<code>O(n)</code>，空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCharType</span><span class="params">(self, c)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'+'</span> <span class="keyword">or</span> c == <span class="string">'-'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">elif</span> c <span class="keyword">in</span> <span class="string">'0123456789'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">        <span class="keyword">elif</span> c == <span class="string">'e'</span> <span class="keyword">or</span> c == <span class="string">'E'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAutoMata</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            (-<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, <span class="number">8</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">4</span>, -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, <span class="number">8</span>, -<span class="number">1</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, <span class="number">8</span>, -<span class="number">1</span>, <span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">            (-<span class="number">1</span>, <span class="number">8</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>),</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        m = self.getAutoMata()</span><br><span class="line">        state = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            t = self.getCharType(c)</span><br><span class="line">            state = m[state][t]</span><br><span class="line">            <span class="keyword">if</span> state == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> state <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/valid-number/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Longest Common Prefix]]></title>
      <link>http://garfieldog.github.io/2015/09/06/longest-common-prefix/</link>
      <guid>http://garfieldog.github.io/2015/09/06/longest-common-prefix/</guid>
      <pubDate>Sun, 06 Sep 2015 01:43:36 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>
]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Write a function to find the longest common prefix string amongst an array of strings.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单题，但容易想复杂。第一反应是用trie树，可以做，但实现较复杂。其实只要按位置依次比对每一个字符串，直到有不相等的情况出现即可。时间复杂度<code>O(n1 + n2 + ...)</code>，空间复杂度<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type strs: List[str]</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(strs[<span class="number">0</span>])):</span><br><span class="line">            stop = <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="keyword">if</span> len(strs[j]) &lt;= i <span class="keyword">or</span> strs[<span class="number">0</span>][i] != strs[j][i]:</span><br><span class="line">                    stop = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> stop:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>][:idx]</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/06/longest-common-prefix/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Wildcard Matching]]></title>
      <link>http://garfieldog.github.io/2015/09/02/wildcard-matching/</link>
      <guid>http://garfieldog.github.io/2015/09/02/wildcard-matching/</guid>
      <pubDate>Wed, 02 Sep 2015 04:20:18 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement wildcard pattern matching with support for ‘?’ and ‘*‘.</p>
<p>‘?’ Matches any single character]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement wildcard pattern matching with support for ‘?’ and ‘*‘.</p>
<p>‘?’ Matches any single character.<br>‘*‘ Matches any sequence of characters (including the empty sequence).</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char *s, const char *p)</p>
<p>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “*“) → true<br>isMatch(“aa”, “a*“) → true<br>isMatch(“ab”, “?*“) → true<br>isMatch(“aab”, “c*a*b”) → false</p>
</blockquote>
<h2 id="分析">分析</h2><p>和<a href="/2015/09/01/regular-expression-matching/">Regular Expression Matching</a>很像，但<code>*</code>的解释是不一样的，正则中<code>*</code>是匹配它前面一个字符出现0或多次，通配符中<code>*</code>可以匹配任意字符出现0或多次。</p>
<p>可以套用上一题的动态规划解法，时间空间都是<code>O(mn)</code>（其实空间可以降到<code>O(m)</code>），但这个解法在网站上提交会超时，有一个更有效率的迭代解法可以参考<a href="http://www.cnblogs.com/zuoyuan/p/3781872.html" target="_blank" rel="external">这里</a>。这个解法的关键在于遇到<code>*</code>时进行<code>反贪心</code>( 就是首先考虑一个字符都不匹配的情况)匹配，如果失败则增加匹配字符数进行回溯。时间<code>O(mn)</code>，空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="动态规划">动态规划</h3><p>由于Leetcode测试用例中有非常长的串，该算法会判超时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchChar</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a == b <span class="keyword">or</span> b == <span class="string">'?'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        m = len(p)</span><br><span class="line">        n = len(s)</span><br><span class="line">        dp = [[<span class="keyword">False</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># first row, s == ''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i - <span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] <span class="keyword">or</span> dp[i - <span class="number">1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] <span class="keyword">and</span> self.isMatchChar(s[i - <span class="number">1</span>], p[j - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[n][m]</span><br></pre></td></tr></table></figure></p>
<h3 id="递归">递归</h3><p>超时</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchChar</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a == b <span class="keyword">or</span> b == <span class="string">'?'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchR</span><span class="params">(self, s, i, p, j)</span>:</span></span><br><span class="line">        m, n = len(p), len(s)</span><br><span class="line">        <span class="keyword">if</span> j == m:</span><br><span class="line">            <span class="keyword">return</span> i == n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p[j] == <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">while</span> j &lt; m <span class="keyword">and</span> p[j] == <span class="string">'*'</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == m:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> <span class="keyword">not</span> self.isMatchR(s, i, p, j):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> i &lt; n</span><br><span class="line">        <span class="keyword">elif</span> i == n:</span><br><span class="line">            <span class="keyword">return</span> j == m</span><br><span class="line">        <span class="keyword">elif</span> self.isMatchChar(s[i], p[j]):</span><br><span class="line">            <span class="keyword">return</span> self.isMatchR(s, i + <span class="number">1</span>, p, j + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.isMatchR(s, <span class="number">0</span>, p, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="迭代">迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchChar</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a == b <span class="keyword">or</span> b == <span class="string">'?'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        m = len(p)</span><br><span class="line">        n = len(s)</span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        star = -<span class="number">1</span></span><br><span class="line">        si = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n:</span><br><span class="line">            <span class="keyword">if</span> j &lt; m <span class="keyword">and</span> self.isMatchChar(s[i], p[j]):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> j &lt; m <span class="keyword">and</span> p[j] == <span class="string">'*'</span>:</span><br><span class="line">                si = i  <span class="comment"># store matched position for s</span></span><br><span class="line">                star = j  <span class="comment"># store star position</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="comment"># p[j] != '*' and s[i] is not mathced to p[j]</span></span><br><span class="line">            <span class="keyword">elif</span> star &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># has star, consume one char in s, and search back</span></span><br><span class="line">                j = star + <span class="number">1</span></span><br><span class="line">                si += <span class="number">1</span></span><br><span class="line">                i = si</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># no star and not match</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; m <span class="keyword">and</span> p[j] == <span class="string">'*'</span>:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> j == m</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/02/wildcard-matching/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Regular Expression Matching]]></title>
      <link>http://garfieldog.github.io/2015/09/01/regular-expression-matching/</link>
      <guid>http://garfieldog.github.io/2015/09/01/regular-expression-matching/</guid>
      <pubDate>Tue, 01 Sep 2015 10:30:11 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement regular expression matching with support for ‘.’ and ‘*‘.</p>
<p>‘.’ Matches any single charact]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement regular expression matching with support for ‘.’ and ‘*‘.</p>
<p>‘.’ Matches any single character.<br>‘*‘ Matches zero or more of the preceding element.</p>
<p>The matching should cover the entire input string (not partial).</p>
<p>The function prototype should be:<br>bool isMatch(const char *s, const char *p)</p>
<p>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a*“) → true<br>isMatch(“aa”, “.*“) → true<br>isMatch(“ab”, “.*“) → true<br>isMatch(“aab”, “c*a*b”) → true</p>
</blockquote>
<h2 id="分析">分析</h2><p>有一定难度，主要是判断<code>*</code>。可以采取<a href="http://articles.leetcode.com/2011/09/regular-expression-matching.html" target="_blank" rel="external">递归法</a>或<a href="http://www.cnblogs.com/flowerkzj/p/3726667.html" target="_blank" rel="external">动态规划</a>。当然，转换为DFA自动机然后做也是没问题的，但实现难度就要更大一些。</p>
<h3 id="TBD">TBD</h3><p>算法分析参考上面给的两篇文章链接。具体分析有点复杂，先留空，刷完题再补。</p>
<h2 id="代码">代码</h2><h3 id="递归法">递归法</h3><p>Leetcode上提交会超时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">END = <span class="string">'\001'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchR</span><span class="params">(self, s, i, p, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> p[j] == END:</span><br><span class="line">            <span class="keyword">return</span> s[i] == END</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p[j + <span class="number">1</span>] != <span class="string">'*'</span>:</span><br><span class="line">            <span class="keyword">return</span> (p[j] == s[i] <span class="keyword">or</span> (p[j] == <span class="string">'.'</span> <span class="keyword">and</span> s[i] != END)) \</span><br><span class="line">                <span class="keyword">and</span> self.isMatchR(s, i + <span class="number">1</span>, p, j + <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># p[j] == '*'</span></span><br><span class="line">        <span class="keyword">while</span>(p[j] == s[i] <span class="keyword">or</span> (p[j] == <span class="string">'.'</span> <span class="keyword">and</span> s[i] != END)):</span><br><span class="line">            <span class="keyword">if</span> self.isMatchR(s, i, p, j + <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> self.isMatchR(s, i, p, j + <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        s += END</span><br><span class="line">        p += END</span><br><span class="line">        <span class="keyword">return</span> self.isMatchR(s, <span class="number">0</span>, p, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="动态规划">动态规划</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatchChar</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a == b <span class="keyword">or</span> b == <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :type p: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        m = len(p)</span><br><span class="line">        n = len(s)</span><br><span class="line">        dp = [[<span class="keyword">False</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="comment"># fisrt row, s == ''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i - <span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">1</span>:</span><br><span class="line">                    dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">2</span>]</span><br><span class="line">            <span class="comment"># otherwise leave dp[0][i] = False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># leave dp[i][0] = False for i &gt; 0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> p[j - <span class="number">1</span>] == <span class="string">'*'</span>:</span><br><span class="line">                    <span class="comment"># j must &gt; 1</span></span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] <span class="keyword">or</span> dp[i][j - <span class="number">2</span>] <span class="keyword">or</span> \</span><br><span class="line">                        (dp[i - <span class="number">1</span>][j] <span class="keyword">and</span> self.isMatchChar(s[i - <span class="number">1</span>], p[j - <span class="number">2</span>]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] <span class="keyword">and</span> self.isMatchChar(s[i - <span class="number">1</span>], p[j - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[n][m]</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/09/01/regular-expression-matching/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Longest Palindromic Substring]]></title>
      <link>http://garfieldog.github.io/2015/08/31/longest-palindromic-substring/</link>
      <guid>http://garfieldog.github.io/2015/08/31/longest-palindromic-substring/</guid>
      <pubDate>Mon, 31 Aug 2015 11:15:48 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of ]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.</p>
</blockquote>
<h2 id="分析">分析</h2><p>如果暴力搜索，对每一个位置都进行两边扩张，时间复杂度为<code>O(n^2)</code>。进过观察发现判断从位置<code>i</code>到<code>j</code>之间的字符串是否为回文满足动态规划的最优子结构<code>f(i, j) = (s[j] == s[i]) and (j - i &lt; 2 or f(i + 1, j - 1))</code>。所以可以使用一个二维数组来缓存子问题结果，时间复杂度<code>O(n^2)</code>，空间<code>O(n^2)</code>。</p>
<p>目前最优的解法是<a href="http://articles.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html" target="_blank" rel="external">Manacher</a>算法，通过一个精妙的构造省去了大量冗余的搜索。对于长回文字符串时间可以降到<code>O(n)</code>。</p>
<h2 id="代码">代码</h2><h3 id="暴力搜索">暴力搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        idx = -<span class="number">1</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n):</span><br><span class="line">            j = <span class="number">1</span></span><br><span class="line">            <span class="comment"># search as center</span></span><br><span class="line">            l = <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i - j &gt;= <span class="number">0</span> <span class="keyword">and</span> i + j &lt; n <span class="keyword">and</span> s[i - j] == s[i + j]:</span><br><span class="line">                l += <span class="number">2</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> l &gt; max_len:</span><br><span class="line">                max_len = l</span><br><span class="line">                idx = i - (l - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># search as left center</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; n <span class="keyword">and</span> s[i] == s[i + <span class="number">1</span>]:</span><br><span class="line">                l = <span class="number">2</span></span><br><span class="line">                j = <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> i - j &gt;= <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> + j &lt; n <span class="keyword">and</span> s[i - j] == s[i + <span class="number">1</span> + j]:</span><br><span class="line">                    l += <span class="number">2</span></span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> l &gt; max_len:</span><br><span class="line">                    max_len = l</span><br><span class="line">                    idx = i - l / <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> s[idx: idx + max_len]</span><br></pre></td></tr></table></figure>
<h3 id="动态规划">动态规划</h3><p>在Leetcode上提交会超时<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        n = len(s)</span><br><span class="line">        <span class="comment"># matrix to store if s[i:j+1] is palindrome</span></span><br><span class="line">        f = [[<span class="keyword">False</span>] * n <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n)]</span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        idx = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> xrange(n):</span><br><span class="line">            f[j][j] = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(j):</span><br><span class="line">                f[i][j] = (s[j] == s[i]) <span class="keyword">and</span> (j - i &lt; <span class="number">2</span> <span class="keyword">or</span> f[i + <span class="number">1</span>][j - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> f[i][j] <span class="keyword">and</span> (j - i + <span class="number">1</span>) &gt; max_len:</span><br><span class="line">                    max_len = j - i + <span class="number">1</span></span><br><span class="line">                    idx = i</span><br><span class="line">        <span class="keyword">return</span> s[idx: idx + max_len]</span><br></pre></td></tr></table></figure></p>
<h3 id="Manacher算法">Manacher算法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preProcess</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'^$'</span></span><br><span class="line">        rs = [<span class="string">'^'</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            rs.append(<span class="string">'#'</span>)</span><br><span class="line">            rs.append(c)</span><br><span class="line">        rs.append(<span class="string">'#$'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(rs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        ns = self.preProcess(s)</span><br><span class="line">        n = len(ns)</span><br><span class="line">        p = [<span class="number">0</span>] * n</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        mx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            j = <span class="number">2</span> * idx - i</span><br><span class="line">            <span class="keyword">if</span> i &lt; mx:</span><br><span class="line">                p[i] = min(mx - i, p[j])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ns[i + p[i]] == ns[i - p[i]]:</span><br><span class="line">                p[i] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i + p[i] &gt; mx:</span><br><span class="line">                mx = i + p[i]</span><br><span class="line">                idx = i</span><br><span class="line"></span><br><span class="line">        max_len = <span class="number">0</span></span><br><span class="line">        max_idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> p[i] &gt; max_len:</span><br><span class="line">                max_len = p[i]</span><br><span class="line">                max_idx = i</span><br><span class="line">        <span class="keyword">return</span> s[(max_idx - max_len) / <span class="number">2</span>: (max_idx + max_len - <span class="number">1</span>) / <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/31/longest-palindromic-substring/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Add Binary]]></title>
      <link>http://garfieldog.github.io/2015/08/31/add-binary/</link>
      <guid>http://garfieldog.github.io/2015/08/31/add-binary/</guid>
      <pubDate>Mon, 31 Aug 2015 10:47:58 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b =]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单题。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBit</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        s = int(a) + int(b) + int(c)</span><br><span class="line">        <span class="keyword">return</span> divmod(s, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, arr)</span>:</span></span><br><span class="line">        n = len(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n / <span class="number">2</span>):</span><br><span class="line">            arr[i], arr[n - <span class="number">1</span> - i] = arr[n - <span class="number">1</span> - i], arr[i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type a: str</span><br><span class="line">        :type b: str</span><br><span class="line">        :rtype: str</span><br><span class="line">        """</span></span><br><span class="line">        m, n = len(a), len(b)</span><br><span class="line">        <span class="keyword">if</span> m &gt; n:</span><br><span class="line">            <span class="keyword">return</span> self.addBinary(b, a)</span><br><span class="line"></span><br><span class="line">        rs = []</span><br><span class="line">        c = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(m):</span><br><span class="line">            c, x = self.addBit(a[m - <span class="number">1</span> - i], b[n - <span class="number">1</span> - i], c)</span><br><span class="line">            rs.append(str(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(m, n):</span><br><span class="line">            c, x = self.addBit(b[n - <span class="number">1</span> - i], <span class="number">0</span>, c)</span><br><span class="line">            rs.append(str(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> c == <span class="number">1</span>:</span><br><span class="line">            rs.append(<span class="string">'1'</span>)</span><br><span class="line">        self.reverse(rs)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(rs)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/31/add-binary/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-String to Integer]]></title>
      <link>http://garfieldog.github.io/2015/08/31/string-to-integer/</link>
      <guid>http://garfieldog.github.io/2015/08/31/string-to-integer/</guid>
      <pubDate>Mon, 31 Aug 2015 09:30:39 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement atoi to convert a string to an integer.</p>
<p>Hint: Carefully consider all possible input case]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement atoi to convert a string to an integer.</p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<p>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单题，但要想全各种输入情况。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, str)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type str: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        n = len(str)</span><br><span class="line">        <span class="comment"># skip leading-whitespaces</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> str[i] == <span class="string">' '</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        sign = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> str[i] == <span class="string">'+'</span>:</span><br><span class="line">            sign = <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> str[i] == <span class="string">'-'</span>:</span><br><span class="line">            sign = -<span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        int_max, int_min = <span class="number">2147483647</span>, -<span class="number">2147483648</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> str[i].isdigit():</span><br><span class="line">            x = x * <span class="number">10</span> + int(str[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        x *= sign</span><br><span class="line">        x = min(int_max, x)</span><br><span class="line">        x = max(int_min, x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/31/string-to-integer/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Implement strStr()]]></title>
      <link>http://garfieldog.github.io/2015/08/31/implement-strstr/</link>
      <guid>http://garfieldog.github.io/2015/08/31/implement-strstr/</guid>
      <pubDate>Mon, 31 Aug 2015 03:50:48 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement strStr().</p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if need]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Implement strStr().</p>
<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
</blockquote>
<h2 id="分析">分析</h2><p>查找子字符串，暴力搜索时间复杂度<code>O(mn)</code>，其中<code>m``n</code>分别是haystack和need的长度。还有很多经典算法，如<a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" target="_blank" rel="external">KMP</a>，<a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" target="_blank" rel="external">Boyer-Moore</a>。KMP算法最坏是时间<code>O(m + n)</code>的，实现可以参考<a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" target="_blank" rel="external">Wiki</a>或<a href="http://www.matrix67.com/blog/archives/115" target="_blank" rel="external">KMP算法详解</a>。<a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" target="_blank" rel="external">Boyer-Moore</a>算法实际情况下表现通常优于KMP，尽管它（needle在haystack中时的）最坏情况下时间是<code>O(mn)</code>的。可以参考<a href="http://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html" target="_blank" rel="external">字符串匹配的Boyer-Moore算法</a>。</p>
<p>因为<code>BM</code>算法使用了两个启发式规则（<code>坏字符</code>和<code>好后缀</code>）来移动needle，而这两个规则是独立的，所以其实用一个也不影响正确性，实现起来方便，只是运行稍慢一些。</p>
<h2 id="代码">代码</h2><h3 id="暴力搜索">暴力搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, haystack, i, needle)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> xrange(len(needle)):</span><br><span class="line">            <span class="keyword">if</span> haystack[i + k] != needle[k]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type haystack: str</span><br><span class="line">        :type needle: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        m, n = len(haystack), len(needle)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(m - n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> self.match(haystack, i, needle):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="KMP">KMP</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type haystack: str</span><br><span class="line">        :type needle: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> needle:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m, n = len(haystack), len(needle)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pre-calculate `p` array</span></span><br><span class="line">        p = [<span class="number">0</span>]</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> needle[i] != needle[j]:</span><br><span class="line">                j = p[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> needle[i] == needle[j]:</span><br><span class="line">                j = j + <span class="number">1</span></span><br><span class="line">            p.append(j)</span><br><span class="line"></span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(m):</span><br><span class="line">            <span class="keyword">while</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> haystack[i] != needle[j]:</span><br><span class="line">                j = p[j - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> haystack[i] == needle[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j == n:</span><br><span class="line">                <span class="keyword">return</span> i - n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="简化版BM（只有坏字符，没有好前缀）">简化版BM（只有坏字符，没有好前缀）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type haystack: str</span><br><span class="line">        :type needle: str</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> needle:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m, n = len(haystack), len(needle)</span><br><span class="line">        p = &#123;x: i <span class="keyword">for</span> i, x <span class="keyword">in</span> enumerate(needle)&#125;</span><br><span class="line">        i = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; m:</span><br><span class="line">            found = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(n):</span><br><span class="line">                <span class="keyword">if</span> haystack[i - j] != needle[n - <span class="number">1</span> - j]:</span><br><span class="line">                    c = p.get(haystack[i - j], -<span class="number">1</span>)</span><br><span class="line">                    new_i = i - j + n - <span class="number">1</span> - c</span><br><span class="line">                    <span class="keyword">if</span> new_i &lt;= i:</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        i = new_i</span><br><span class="line">                    found = <span class="keyword">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">return</span> i - n + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="完整BM">完整BM</h3><p>TBD</p>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/31/implement-strstr/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Valid Palindrome]]></title>
      <link>http://garfieldog.github.io/2015/08/31/valid-palindrome/</link>
      <guid>http://garfieldog.github.io/2015/08/31/valid-palindrome/</guid>
      <pubDate>Mon, 31 Aug 2015 03:36:02 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring ca]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.</p>
</blockquote>
<h2 id="分析">分析</h2><p>简单题，判断是否回文。用两指针，分别从头和尾相向而行，时间<code>O(n)</code>，空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><p>###Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type s: str</span><br><span class="line">        :rtype: bool</span><br><span class="line">        """</span></span><br><span class="line">        i, j = <span class="number">0</span>, len(s) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s[i].isalnum():</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> s[j].isalnum():</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> s[i].lower() == s[j].lower():</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/31/valid-palindrome/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-LRU Cache]]></title>
      <link>http://garfieldog.github.io/2015/08/29/lru-cache/</link>
      <guid>http://garfieldog.github.io/2015/08/29/lru-cache/</guid>
      <pubDate>Sat, 29 Aug 2015 09:50:57 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the followin]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.</p>
<p>get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.<br>set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>
</blockquote>
<h2 id="分析">分析</h2><p>要求实现一个LRU cache，有两个要点：</p>
<ol>
<li><code>get</code>, <code>set</code>操作都应该是<code>O(1)</code>的，否则就失去了cache的意义</li>
<li>要保持LRU的语义</li>
</ol>
<p>所以我们用一个哈希表外加一个双向链表完成（单项链表无法做到<code>O(1)</code>）。用hash表来迅速定位到节点，每次访问一个节点后，将这个节点移动到链表头部(<code>move_to_head</code>)，当cache到达capacity上限时，从链表尾部删除节点。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for doubly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line">        self.prev = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type capacity: int</span><br><span class="line">        """</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.dummy_head = ListNode(<span class="keyword">None</span>, -<span class="number">1</span>)</span><br><span class="line">        self.dummy_tail = ListNode(<span class="keyword">None</span>, -<span class="number">1</span>)</span><br><span class="line">        self.dummy_head.next = self.dummy_tail</span><br><span class="line">        self.dummy_tail.prev = self.dummy_head</span><br><span class="line">        self.store = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(self)</span>:</span></span><br><span class="line">        cur = self.dummy_head.next</span><br><span class="line">        <span class="keyword">while</span> cur != self.dummy_tail:</span><br><span class="line">            <span class="keyword">print</span> cur.val, <span class="string">'-&gt;'</span>,</span><br><span class="line">            cur = cur.next</span><br><span class="line">        <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move_to_head</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node == self.dummy_head <span class="keyword">or</span> node == self.dummy_tail:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> node.prev:</span><br><span class="line">            node.prev.next = node.next</span><br><span class="line">        <span class="keyword">if</span> node.next:</span><br><span class="line">            node.next.prev = node.prev</span><br><span class="line">        node.prev = self.dummy_head</span><br><span class="line">        node.next = self.dummy_head.next</span><br><span class="line">        self.dummy_head.next.prev = node</span><br><span class="line">        self.dummy_head.next = node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :rtype: int</span><br><span class="line">        """</span></span><br><span class="line">        node = self.store.get(key, self.dummy_head)</span><br><span class="line">        self.move_to_head(node)</span><br><span class="line">        <span class="keyword">return</span> node.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type key: int</span><br><span class="line">        :type value: int</span><br><span class="line">        :rtype: nothing</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.store:</span><br><span class="line">            node = self.store[key]</span><br><span class="line">            node.val = value</span><br><span class="line">            self.move_to_head(node)</span><br><span class="line">        <span class="keyword">elif</span> self.size &lt; self.capacity:</span><br><span class="line">            node = ListNode(key, value)</span><br><span class="line">            self.move_to_head(node)</span><br><span class="line">            self.store[key] = node</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            last = self.dummy_tail.prev</span><br><span class="line">            <span class="keyword">del</span> self.store[last.key]</span><br><span class="line">            last.val = value</span><br><span class="line">            last.key = key</span><br><span class="line">            self.store[last.key] = last</span><br><span class="line">            self.move_to_head(last)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/29/lru-cache/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Reorder List]]></title>
      <link>http://garfieldog.github.io/2015/08/27/reorder-list/</link>
      <guid>http://garfieldog.github.io/2015/08/27/reorder-list/</guid>
      <pubDate>Thu, 27 Aug 2015 15:35:15 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
<p>You must ]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a singly linked list L: L0→L1→…→Ln-1→Ln,<br>reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</p>
<p>You must do this in-place without altering the nodes’ values.</p>
<p>For example,<br>Given {1,2,3,4}, reorder it to {1,4,2,3}.</p>
</blockquote>
<h2 id="分析">分析</h2><p>分四步：</p>
<ol>
<li>遍历链表获得长度</li>
<li>找到链表中点，断开成两个链表</li>
<li>翻转第二个链表</li>
<li>将两个链表合并</li>
</ol>
<p>时间复杂度<code>O(n)</code>，空间<code>O(1)</code>。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: void Do not return anything, modify head in-place instead.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        l = <span class="number">0</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            l += <span class="number">1</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">        m = (l - <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(m):</span><br><span class="line">            cur = cur.next</span><br><span class="line"></span><br><span class="line">        head2 = cur.next</span><br><span class="line">        cur.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># now we have two lists, reverse the second one</span></span><br><span class="line">        prev = head2</span><br><span class="line">        cur = head2.next</span><br><span class="line">        prev.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            next = cur.next</span><br><span class="line">            cur.next = prev</span><br><span class="line">            prev = cur</span><br><span class="line">            cur = next</span><br><span class="line">        head2 = prev</span><br><span class="line"></span><br><span class="line">        <span class="comment"># then we merge the two lists</span></span><br><span class="line">        <span class="keyword">while</span> head2:</span><br><span class="line">            n1 = head.next</span><br><span class="line">            n2 = head2.next</span><br><span class="line">            head.next = head2</span><br><span class="line">            head2.next = n1</span><br><span class="line">            head = n1</span><br><span class="line">            head2 = n2</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/27/reorder-list/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-Linked List Cycle II]]></title>
      <link>http://garfieldog.github.io/2015/08/27/linked-list-cycle-2/</link>
      <guid>http://garfieldog.github.io/2015/08/27/linked-list-cycle-2/</guid>
      <pubDate>Thu, 27 Aug 2015 14:39:30 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>No]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>
<p>Note: Do not modify the linked list.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
</blockquote>
<p><a href="/2015/08/27/linked-list-cycle/">Linked List Cycle</a>的升级版。要求不仅判断是否有环，而且要找出环开始的位置。</p>
<h2 id="分析">分析</h2><p>对于存在环的情况，设从链表头部到环第一个元素的距离为<code>x</code>，从环第一个元素到两指针相遇点距离为<code>y</code>，环长度为<code>r</code>。这里可以证明的一点是，当两指针相遇时，慢指针肯定没有跑完一圈。这样来证明：当慢指针到达环第一个元素时，快指针肯定在环中某个地方，设距离环第一个元素<code>z</code>，肯定有<code>z &lt; r</code>。而快指针只需要<code>z</code>步就可以追上慢指针，所以慢指针没有机会跑完一圈。</p>
<p>设相遇时已经走了<code>t</code>步，则<code>t = x + y</code>, <code>2t = x + y + nr</code>， 其中<code>n</code>为正整数。则可以推导出<code>t = nr</code>，<code>x = nr - y = (n - 1)r + (r - y)</code>。这样一来，如果我们在两指针相遇后，再用一个指针从链表头开始走，直到它和慢指针相遇，相遇点就是环开始的地方。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        :type head: ListNode</span><br><span class="line">        :rtype: ListNode</span><br><span class="line">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        p1 = head.next</span><br><span class="line">        p2 = head.next.next</span><br><span class="line">        <span class="keyword">while</span> p2:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> p2 <span class="keyword">or</span> <span class="keyword">not</span> p2.next:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> p1 == p2:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            p2 = p2.next.next</span><br><span class="line">            p1 = p1.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p1 == p2:</span><br><span class="line">            p2 = head</span><br><span class="line">            <span class="keyword">while</span> p1 != p2:</span><br><span class="line">                p1 = p1.next</span><br><span class="line">                p2 = p2.next</span><br><span class="line">            <span class="keyword">return</span> p1</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/27/linked-list-cycle-2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
