<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Mew]]></title>
    <link>http://garfieldog.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[只有猪肉卷是永恒的]]></description>
    <pubDate>Wed, 19 Aug 2015 04:42:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Leetcode解题-找出两个有序数组的中位数]]></title>
      <link>http://garfieldog.github.io/2015/08/19/median-of-two-sorted-arrays/</link>
      <guid>http://garfieldog.github.io/2015/08/19/median-of-two-sorted-arrays/</guid>
      <pubDate>Wed, 19 Aug 2015 03:07:51 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sort]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
</blockquote>
<p>给定两个有序的数组，长度分别问m和n，把这两个数组看成一个整体，求中位数。要求时间复杂度O(log(m+n))。中位数的定义是，如果一个集合有奇数<code>2k + 1</code>个元素，那排序后第k个数就是中位数，如果有偶数<code>2k</code>个元素，那么中位数的定义为排序后第<code>k</code>个数和第<code>k+1</code>个数的平均值。</p>
<h2 id="分析">分析</h2><p>看时间复杂度的要求，首先想到的就是二分法，但是如何在两个数组上进行二分呢？我们把这个问题分解一下，先求解<code>在两个有序数组中查找整体第k大的数</code>，如果<code>m+n</code>是偶数，则调用两次子过程求平均，如果是奇数，调用一次。我们这样来找第k大的数：</p>
<ol>
<li>假设m和n都大于<code>k/2</code>，则比较<code>nums1[k/2 - 1]</code>和<code>nums2[k - k/2 - 1]</code></li>
<li>如果前者比较大，则可以扔掉<code>nums2[k - k/2 - 1]</code>之前的<code>k/2</code>个数</li>
<li>如果后者比较大，则可以扔掉<code>nums1[k/2 - 1]</code>之前的<code>k/2</code>个数</li>
<li>如果相等，说明第k个数已经找到</li>
</ol>
<p>如果m和n中有一个小于<code>k/2</code>呢？假设n比m小，那么就取<code>min(k/2, n)</code>和<code>k - min(k/2, n)</code>作为比较的下标值。<br>时间复杂度是O(log(k))。在写代码的过程中，边界判断是非常容易出错的，要反复练习。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param &#123;integer[]&#125; nums1</span></span><br><span class="line">    <span class="comment"># @param &#123;integer[]&#125; nums2</span></span><br><span class="line">    <span class="comment"># @return &#123;float&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">        total = len(nums1) + len(nums2)</span><br><span class="line">        <span class="keyword">if</span> total % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            c1 = self.findKthInSortedArrays(nums1, nums2, total / <span class="number">2</span>)</span><br><span class="line">            c2 = self.findKthInSortedArrays(nums1, nums2, total / <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">            median = (c1 + c2) / <span class="number">2.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            median = float(self.findKthInSortedArrays(nums1, nums2, total / <span class="number">2</span> + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> median</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthInSortedArrays</span><span class="params">(self, nums1, nums2, k)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.findKthInSortedArraysR(nums1, <span class="number">0</span>, len(nums1) - <span class="number">1</span>,</span><br><span class="line">                                           nums2, <span class="number">0</span>, len(nums2) - <span class="number">1</span>, k)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthInSortedArraysR</span><span class="params">(self, nums1, x1, y1, nums2, x2, y2, k)</span>:</span></span><br><span class="line">        m = y1 - x1 + <span class="number">1</span></span><br><span class="line">        n = y2 - x2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m &lt; n:</span><br><span class="line">            <span class="keyword">return</span> self.findKthInSortedArraysR(nums2, x2, y2, nums1, x1, y1, k)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> nums1[x1 + k - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> min(nums1[x1], nums2[x2])</span><br><span class="line"></span><br><span class="line">        k2 = min(k / <span class="number">2</span>, n)</span><br><span class="line">        k1 = k - k2</span><br><span class="line">        <span class="keyword">if</span> nums1[x1 + k1 - <span class="number">1</span>] == nums2[x2 + k2 - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> nums1[x1 + k1 - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">elif</span> nums1[x1 + k1 - <span class="number">1</span>] &gt; nums2[x2 + k2 - <span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> self.findKthInSortedArraysR(nums1, x1, y1, nums2, x2 + k2, y2, k - k2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.findKthInSortedArraysR(nums1, x1 + k1, y1, nums2, x2, y2, k - k1)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/19/median-of-two-sorted-arrays/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-在被旋转的有序数组中查找目标II]]></title>
      <link>http://garfieldog.github.io/2015/08/19/search-in-rotated-sorted-array-2/</link>
      <guid>http://garfieldog.github.io/2015/08/19/search-in-rotated-sorted-array-2/</guid>
      <pubDate>Wed, 19 Aug 2015 02:25:25 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?</p>
<p>Would this affe]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Follow up for “Search in Rotated Sorted Array”:<br>What if duplicates are allowed?</p>
<p>Would this affect the run-time complexity? How and why?</p>
<p>Write a function to determine if a given target is in the array.</p>
</blockquote>
<p>基本设定和<a href="/2015/08/18/search-in-rotated-sorted-array/">上一题</a>一样，但允许重复元素。<br>另外，本题只需要输出<code>True</code> or <code>False</code>即可，不需要输出下标。</p>
<h2 id="分析">分析</h2><p>允许重复元素之后，<code>A[mid]</code>和<code>A[low]</code>就有可能相等，这种情况下我们就无法判断<code>A[mid]</code>是在哪个子数组中，这种情况下，我们可以简单地让<code>low</code>指针向前走一步。这样一来，算法最坏情况下时间复杂度增加到了O(n)，平均情况下仍然为O(log(n))。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_r</span><span class="params">(self, A, target, low, high)</span>:</span></span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> A[low] &lt; A[mid]:</span><br><span class="line">            <span class="comment"># A[mid] locates in the first sub-array</span></span><br><span class="line">            <span class="keyword">if</span> A[low] &lt;= target &lt; A[mid]:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, low, mid - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, mid + <span class="number">1</span>, high)</span><br><span class="line">        <span class="keyword">elif</span> A[low] == A[mid]:</span><br><span class="line">            <span class="keyword">return</span> self.search_r(A, target, low + <span class="number">1</span>, high)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># A[mid] locates in the second sub-array</span></span><br><span class="line">            <span class="keyword">if</span> A[mid] &lt; target &lt;= A[high]:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, mid + <span class="number">1</span>, high)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, low, mid - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.search_r(nums, target, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/19/search-in-rotated-sorted-array-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-在被旋转的有序数组中查找目标]]></title>
      <link>http://garfieldog.github.io/2015/08/18/search-in-rotated-sorted-array/</link>
      <guid>http://garfieldog.github.io/2015/08/18/search-in-rotated-sorted-array/</guid>
      <pubDate>Tue, 18 Aug 2015 15:33:09 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 mi]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Suppose a sorted array is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return -1.</p>
<p>You may assume no duplicate exists in the array.</p>
</blockquote>
<p>一个有序的数组可能在某个位置被旋转，比如[0, 1, 2, 4, 5, 6, 7]在4这个数字位置上被旋转后变为[4, 5, 6, 7, 0, 1, 2]，给定一个目标元素，查找这个元素在数组中的下标，如果不存在，返回-1。假设数组中没有重复值。</p>
<h2 id="分析">分析</h2><p>在有序数组中查找目标，直接使用二分法即可。如果数组被旋转之后呢？考察这个数组的性质，它由两段有序子数组组成，并且，第一个子数组的任一个数都<code>大于</code>(因为数组没有重复值)第二个子数组的所有数。这样一来，我们仍然可以在这个数组上展开二分查找：当<code>A[mid] &gt; A[low]</code>时，我们知道mid肯定落在第一个子数组里，反则反之。这时候我们再对比<code>target</code>和<code>A[low]</code>, <code>A[mid]</code>, <code>A[high]</code>的大小，从而判断接下来在那个半区搜索。</p>
<p>难点在边界条件的判断。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_r</span><span class="params">(self, A, target, low, high)</span>:</span></span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> A[mid] == target:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> A[low] &lt;= A[mid]:</span><br><span class="line">            <span class="comment"># A[mid] locates in the first sub-array</span></span><br><span class="line">            <span class="keyword">if</span> A[low] &lt;= target &lt; A[mid]:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, low, mid - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, mid + <span class="number">1</span>, high)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># A[mid] locates in the second sub-array</span></span><br><span class="line">            <span class="keyword">if</span> A[mid] &lt; target &lt;= A[high]:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, mid + <span class="number">1</span>, high)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> self.search_r(A, target, low, mid - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.search_r(nums, target, <span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/18/search-in-rotated-sorted-array/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-去除有序数组中的重复元素II]]></title>
      <link>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array-2/</link>
      <guid>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array-2/</guid>
      <pubDate>Tue, 18 Aug 2015 09:28:17 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<p>For example,<b]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Follow up for “Remove Duplicates”:<br>What if duplicates are allowed at most twice?</p>
<p>For example,<br>Given sorted array nums = [1,1,1,2,2,3],</p>
<p>Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn’t matter what you leave beyond the new length.</p>
</blockquote>
<p>基本设定和<a href="/2015/08/18/remove-duplicates-from-sorted-array/">上一题</a>是一样的，但是难度稍有增加，允许同一元素出现至多两次，比如[1, 1, 1, 2, 2, 3]中1出现了3次，去重后保留2次，2出现2次，全保留，3出现1次，全保留。去重后原数组变为[1, 1, 2, 2, 3]，长度为5。</p>
<h2 id="分析">分析</h2><p>由于相同元素肯定“扎堆出现”，修改<a href="/2015/08/18/remove-duplicates-from-sorted-array/">上一题</a>的代码，只要添加一个计数器，记录当前元素已经出现的个数就可以。时间复杂度O(n)，空间复杂度O(1)。</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m = <span class="number">1</span>  <span class="comment"># counter</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> m &lt; <span class="number">2</span> <span class="keyword">or</span> n != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[i] = n</span><br><span class="line">                m = <span class="number">1</span> <span class="keyword">if</span> n != nums[i - <span class="number">1</span>] <span class="keyword">else</span> m + <span class="number">1</span>  <span class="comment"># reset m -&gt; 1 if a new number occurs</span></span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Leetcode解题-去除有序数组中的重复元素]]></title>
      <link>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array/</link>
      <guid>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array/</guid>
      <pubDate>Tue, 18 Aug 2015 08:34:22 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return t]]>
      </description>
      <content:encoded><![CDATA[<h2 id="描述">描述</h2><blockquote>
<p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p>
</blockquote>
<p>给定一个排序后的数组，要求移除重复的元素，返回新的数组长度。要求O(1)空间</p>
<h2 id="分析">分析</h2><p>这是一道简单题，使用两指针，一个记录去重后数组的尾部，一个扫原数组。可以实现inplace的时间O(n)空间O(1)的算法。另外，理解原题后就会发现，其实“有序”这个限定过于严格，只要保证相同的元素排列在一起就可以使用该算法。比如：[6, 6, 8, 8, 8, 7]</p>
<h2 id="代码">代码</h2><h3 id="Python">Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> n != nums[i - <span class="number">1</span>]:</span><br><span class="line">                nums[i] = n</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/18/remove-duplicates-from-sorted-array/#disqus_thread</comments>
    </item>
    
    <item>
      <title><![CDATA[Mew]]></title>
      <link>http://garfieldog.github.io/2015/08/18/mew/</link>
      <guid>http://garfieldog.github.io/2015/08/18/mew/</guid>
      <pubDate>Tue, 18 Aug 2015 02:56:14 GMT</pubDate>
      <description>
      <![CDATA[<h2 id="猪肉卷">猪肉卷</h2><blockquote>
<p>我见过你们人类难以置信的事，<br>我见过太空飞船在猎户星座的边缘被击中，<br>燃起熊熊火光。<br>我见过Ｃ射线，<br>划过“唐怀瑟之门”那幽暗的宇宙空间。<br>然而所有的这些时刻都将消失在时间里，]]>
      </description>
      <content:encoded><![CDATA[<h2 id="猪肉卷">猪肉卷</h2><blockquote>
<p>我见过你们人类难以置信的事，<br>我见过太空飞船在猎户星座的边缘被击中，<br>燃起熊熊火光。<br>我见过Ｃ射线，<br>划过“唐怀瑟之门”那幽暗的宇宙空间。<br>然而所有的这些时刻都将消失在时间里，<br>就像……泪水……消失在雨中一样。<br>……<br>哎这炸酱面该下锅了吧！？</p>
</blockquote>
<h2 id="千层面">千层面</h2><p>$ E = mc^2 $</p>
<h2 id="披萨">披萨</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arr, start, end)</span>:</span></span><br><span class="line">    pivot = arr[start]</span><br><span class="line">    arr[end], arr[start] = arr[start], arr[end]</span><br><span class="line">    i = start</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> xrange(start, end, <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt;= pivot:</span><br><span class="line">            <span class="keyword">if</span> i != j:</span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">    arr[end], arr[i] = arr[i], arr[end]</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort_r</span><span class="params">(arr, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        p = partition(arr, start, end)</span><br><span class="line">        qsort_r(arr, start, p - <span class="number">1</span>)</span><br><span class="line">        qsort_r(arr, p + <span class="number">1</span>, end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">qsort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    qsort_r(arr, <span class="number">0</span>, len(arr) - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://garfieldog.github.io/2015/08/18/mew/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
